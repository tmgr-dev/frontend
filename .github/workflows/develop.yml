name: develop

on:
  push:
    branches:
      - develop
jobs:
  deploying:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: acrossoffwest/domda-php-fpm:8.0.0.1

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.5.0
        with:
          key: ${{ secrets.RSA_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Creating .ssh folder
        run: mkdir ~/.ssh

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.DEV_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Git reset
        run: |
          ssh -o "StrictHostKeyChecking no" ${{ secrets.SSH_USER }}@${{ secrets.DEV_SSH_HOST }} -p ${{ secrets.SSH_PORT }} "cd ~/projects/${{ github.event.repository.name }} && git reset --hard HEAD && git fetch && git checkout ${{env.GIT_BRANCH_NAME}}"

      - name: Git Pull
        run: |
          ssh -o "StrictHostKeyChecking no" ${{ secrets.SSH_USER }}@${{ secrets.DEV_SSH_HOST }} -p ${{ secrets.SSH_PORT }} "cd ~/projects/${{ github.event.repository.name }} && git pull origin ${{env.GIT_BRANCH_NAME}}"

      - name: NPM Install
        run: |
          ssh -o "StrictHostKeyChecking no" ${{ secrets.SSH_USER }}@${{ secrets.DEV_SSH_HOST }} -p ${{ secrets.SSH_PORT }} "cd ~/projects/${{ github.event.repository.name }}/docker && docker-compose run --rm node npm ci"

      - name: Build
        run: |
          ssh -o "StrictHostKeyChecking no" ${{ secrets.SSH_USER }}@${{ secrets.DEV_SSH_HOST }} -p ${{ secrets.SSH_PORT }} "cd ~/projects/${{ github.event.repository.name }}/docker && docker-compose run --rm node npm run build"

  on-success-deploying:
    needs: [deploying]
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1

      - name: curl
        uses: indiesdev/curl@v1
        with:
          url: https://ts3-telegram.aow.space/notifications
          method: POST
          accept: 200
          headers: '{ "Content-Type": "application/json" }'
          body: '{ "message": "\nDeploy successful \n#deploy #successful\n\nRepository: `${{ github.repository }}`\nBranch: `${{ env.GIT_BRANCH_NAME }}`\nPusher: `${{ github.event.pusher.name }}`\n\nHead commit:\n`${{ github.event.head_commit.message }}`\n © `${{ github.event.pusher.name }}` in [commit](${{ github.event.head_commit.url }})", "receivers": ${{ secrets.DEV_TELEGRAM_CHATS }} }'

  on-failure-deploying:
    needs: [deploying]
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1

      - name: curl
        uses: indiesdev/curl@v1
        with:
          url: https://ts3-telegram.aow.space/notifications
          method: POST
          accept: 200
          headers: '{ "Content-Type": "application/json" }'
          body: '{ "message": "\n Deploy failed \n#deploy #failed\n\nRepository: `${{ github.repository }}`\nBranch: `${{ env.GIT_BRANCH_NAME }}`\nPusher: `${{ github.event.pusher.name }}`\n\nHead commit:\n`${{ github.event.head_commit.message }}`\n © `${{ github.event.pusher.name }}` in [commit](${{ github.event.head_commit.url }})", "receivers": ${{ secrets.DEV_TELEGRAM_CHATS }} }'
